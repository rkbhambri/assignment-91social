{"version":3,"sources":["components/Pagination/Pagination.js","httpInstance/axios.js","config.js","store/actions/history.js","store/actions/address.js","components/Input/Input.js","components/Search/Search.js","components/Address/Payload/Payload.js","components/Address/Address.js"],"names":["Pagination","props","className","pageNumbers","map","item","key","id","style","background","currentPage","onClick","event","updateCurrentPage","target","instance","axios","create","baseURL","headers","getSpacexHistory","dispatch","get","then","response","spacexHistory","data","type","actionTypes","catch","error","emptySpacexHistory","getSpacexAddress","spacexAddress","emptySpacexAddress","Input","maxLength","placeholder","value","onChange","inputChangeHandler","Search","search","Payload","details","payload_id","payload_type","payload_mass_kg","customers","manufacturer","nationality","connect","state","address","onGetSpacexAddress","actionCreaters","onEmptySpacexAddress","useState","setCurrentPage","setPageNumbers","itemsPerPage","searchedData","setSearchedData","searchValue","setSearchValue","useEffect","isArrayNotEmpty","i","Math","ceil","length","push","debounce","isEmpty","filter","toLowerCase","slice","indexOfLastItem","indexOfFirstItem","index","isArrayEmpty","number","Number"],"mappings":"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","file":"static/js/5.76fd6d92.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './Pagination.css';\n\nconst Pagination = (props) => {\n    return (\n        <div className=\"pagination\">\n            {\n                props.pageNumbers.map(item => {\n                    return (\n                        <div\n                            key={item}\n                            id={item}\n                            className=\"page-number\"\n                            style={{ background: props.currentPage === item ? '#ddd' : '#fff' }}\n                            onClick={(event) => props.updateCurrentPage(event.target.id)}>\n                            {item}\n                        </div>\n                    );\n                })\n            }\n        </div>\n    );\n};\n\nexport default Pagination;\n","// importing axios for network request\nimport axios from 'axios';\nimport { axiosBaseUrl } from '../config';\n\n// Created Axios instance to use it in whole application\nvar instance = axios.create({\n    baseURL: axiosBaseUrl,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default instance;\n\n\n","\nexport const axiosBaseUrl = 'https://api.themoviedb.org/3/';\nexport const getApiKey = '7c3737ebecf43629356545679fe376dc';\nexport const getLanguage = 'en-US';\nexport const getImageBaseUrl = 'https://image.tmdb.org/t/p/w220_and_h330_face';\n","import * as actionTypes from './actionTypes';\nimport axios from '../../httpInstance/axios';\n\nexport const setSpacexHistory = (spacexHistory) => ({\n    type: actionTypes.SET_SPACEX_HISTORY,\n    spacexHistory\n});\n\nexport const getSpacexHistory = () => {\n    return dispatch => {\n        axios.get(`https://api.spacexdata.com/v3/history`)\n            .then(response => {\n                if (response.data) {\n                    dispatch(setSpacexHistory(response.data));\n                }\n            })\n            .catch(error => {\n\n            });\n    };\n};\n\nexport const emptySpacexHistory = () => ({\n    type: actionTypes.EMPTY_SPACEX_HISTORY,\n});\n","import * as actionTypes from './actionTypes';\nimport axios from '../../httpInstance/axios';\n\nexport const setSpacexAddress = (spacexAddress) => ({\n    type: actionTypes.SET_SPACEX_ADDRESS,\n    spacexAddress\n});\n\nexport const getSpacexAddress = () => {\n    return dispatch => {\n        axios.get(`https://api.spacexdata.com/v3/payloads`)\n            .then(response => {\n                if (response.data) {\n                    dispatch(setSpacexAddress(response.data));\n                }\n            })\n            .catch(error => {\n\n            });\n    };\n};\n\nexport const emptySpacexAddress = () => ({\n    type: actionTypes.EMPTY_SPACEX_ADDRESS,\n});\n","import React from 'react';\nimport './Input.css';\n\nconst Input = (props) => {\n    return (\n        <input\n            maxLength={props.maxLength}\n            type={props.type}\n            placeholder={props.placeholder}\n            id={props.id}\n            value={props.value}\n            onChange={(event) => props.inputChangeHandler(event)} />\n    );\n};\n\nexport default Input;\n","import React from 'react';\nimport Input from '../Input/Input';\n\nconst Search = (props) => {\n    return (\n        <form className=\"input-group\">\n            <Input\n                type=\"search\"\n                placeholder={props.placeholder}\n                inputChangeHandler={(event) => props.search(event.target.value)}\n            />\n        </form>\n    );\n};\n\nexport default Search;\n","import React from 'react';\nimport './Payload.css';\n\nconst Payload = (props) => {\n    return (\n        <div className=\"payload\">\n            <div className=\"payload-details\">\n                <div className=\"payload-id\">\n                    <div className=\"heading\">Id</div>\n                    {props.details.payload_id}\n                </div>\n                <div className=\"payload-type\">\n                    <div className=\"heading\">Type</div>\n                    {props.details.payload_type}\n                </div>\n                <div className=\"payload-mass\">\n                    <div className=\"heading\">Mass</div>\n                    {props.details.payload_mass_kg}\n                </div>\n            </div>\n            <div className=\"miscellaneous-details\">\n                <div className=\"customers\">\n                    <div className=\"heading\">Customers</div>\n                    {props.details.customers.map(item => item)}\n                </div>\n                <div className=\"manufacturer\">\n                    <div className=\"heading\">Manufacturer</div>\n                    {props.details.manufacturer}\n                </div>\n                <div className=\"nationality\">\n                    <div className=\"heading\">Nationality</div>\n                    {props.details.nationality}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Payload;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreaters from '../../store/actions';\nimport Payload from './Payload/Payload';\nimport { isArrayNotEmpty, debounce, isEmpty, isArrayEmpty } from '../../helpers/miscellenous';\nimport './Address.css';\nimport Pagination from '../Pagination/Pagination';\nimport Search from '../Search/Search';\n\nconst Address = (props) => {\n\n    const [currentPage, setCurrentPage] = useState(1);\n    const [pageNumbers, setPageNumbers] = useState([]);\n    const [itemsPerPage] = useState(12);\n    const [searchedData, setSearchedData] = useState([]);\n    const [searchValue, setSearchValue] = useState('');\n\n    useEffect(() => {\n        props.onGetSpacexAddress();\n        return (() => {\n            props.onEmptySpacexAddress();\n        })\n    }, []);\n\n    useEffect(() => {\n        if (isArrayNotEmpty(props.spacexAddress)) {\n            const pageNumbers = [];\n            for (let i = 1; i <= Math.ceil(props.spacexAddress.length / itemsPerPage); i++) {\n                pageNumbers.push(i);\n            }\n            setPageNumbers(pageNumbers);\n        }\n    }, [props.spacexAddress]);\n\n    const search = debounce((value) => {\n        let searchedData = [];\n        if (!isEmpty(value)) {\n            searchedData = props.spacexAddress.filter((item) => {\n                return item.payload_id.toLowerCase().search(value.toLowerCase()) !== -1;\n            });\n        }\n        setSearchedData(searchedData.slice(0, itemsPerPage));\n        setSearchValue(value);\n    }, 500);\n\n    const updateCurrentPage = (number) => {\n        setCurrentPage(Number(number));\n    };\n\n    const indexOfLastItem = currentPage * itemsPerPage;\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n    return (\n        <>\n            {/* <div className=\"space-x-address\">\n                {\n                    props.spacexAddress.slice(indexOfFirstItem, indexOfLastItem).map((item, index) => {\n                        return <Payload details={item} key={index} />\n                    })\n                }\n            </div>\n            <Pagination pageNumbers={pageNumbers} updateCurrentPage={(number) => updateCurrentPage(number)} />\n             */}\n            <Search placeholder={'Search by Payload Id'} search={(value) => search(value)} />\n            <div className=\"space-x-address\">\n                {\n                    !isEmpty(searchValue) ?\n                        searchedData.slice(indexOfFirstItem, indexOfLastItem).map((item, index) => {\n                            return <Payload details={item} key={index} />\n                        })\n                        :\n                        props.spacexAddress.slice(indexOfFirstItem, indexOfLastItem).map((item, index) => {\n                            return <Payload details={item} key={index} />\n                        })\n                }\n            </div>\n            {\n                !isEmpty(searchValue) && isArrayEmpty(searchedData) &&\n                <div className=\"no-data\">\n                    <h3>No Data Found</h3>\n                </div>\n            }\n            {\n                isEmpty(searchValue) &&\n                <Pagination\n                    currentPage={currentPage}\n                    pageNumbers={pageNumbers}\n                    updateCurrentPage={(number) => updateCurrentPage(number)} />\n            }\n        </>\n    );\n};\n\nconst mapStateToProps = state => {\n    return {\n        spacexAddress: state.address.spacexAddress\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onGetSpacexAddress: () => dispatch(actionCreaters.getSpacexAddress()),\n        onEmptySpacexAddress: () => dispatch(actionCreaters.emptySpacexAddress())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Address);"],"sourceRoot":""}